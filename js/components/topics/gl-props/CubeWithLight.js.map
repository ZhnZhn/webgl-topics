{"version":3,"sources":["../../../../src/components/topics/gl-props/CubeWithLight.js"],"names":["CubeWithLight","vertexShaderCode","fragmentShaderCode","valuesForInit","zMatrixTranslate","isWithoutPointSize","isDrawElemnts","topicLink","type","title","href","isPro","createVertices","target","vertices","vertexCount","length","gl","shaderProgram","buffer","createBuffer","Float32Array","createAttrib","normals","normalBuffer","lightColor","getUniformLocation","uniform3f","lightDirection","createIndices","indices","indexCount","indexBuffer","Uint8Array","clearBuffers","deleteBuffer"],"mappings":"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","file":"CubeWithLight.js","sourcesContent":["import fnGL from '../gl-fn/fnGL'\r\n\r\n\r\nconst CubeWithLight = {\r\n  vertexShaderCode : `\r\n  attribute vec4 coords;\r\n  uniform mat4 transformMatrix;\r\n  uniform mat4 perspectiveMatrix;\r\n\r\n  attribute vec3 normal;\r\n  uniform vec3 lightColor;\r\n  uniform vec3 lightDirection;\r\n\r\n  varying vec4 varyingColors;\r\n  void main(void){\r\n    vec3 norm = normalize(normal);\r\n    vec3 ld = normalize(lightDirection);\r\n    float dotProduct = max(dot(norm, ld), 0.0);\r\n    vec3 vertexColor = lightColor * vec3(1, 1, 0) * dotProduct;\r\n    varyingColors = vec4(vertexColor, 1);\r\n\r\n    gl_Position = perspectiveMatrix * transformMatrix * coords;\r\n  }\r\n  `,\r\n\r\n  fragmentShaderCode : `\r\n  precision mediump float;\r\n  varying vec4 varyingColors;\r\n  void main(void) {\r\n    gl_FragColor = varyingColors;\r\n  }\r\n  `,\r\n\r\n  valuesForInit : {\r\n    zMatrixTranslate : -4,\r\n    isWithoutPointSize : true,\r\n    isDrawElemnts : true,\r\n    topicLink : {\r\n      type : 'EGGHEAD',\r\n      title : 'Egghead : Course : Build Complex 3D models with WebGL',\r\n      href : 'https://egghead.io/courses/build-complex-3d-models-with-webgl',\r\n      isPro : true\r\n    }\r\n  },\r\n\r\n  createVertices : (target) => {\r\n    const vertices = target.vertices = [\r\n  -1, -1, -1,\r\n   1, -1, -1,\r\n  -1, 1, -1,\r\n   1, 1, -1,\r\n  -1, 1, 1,\r\n   1, 1, 1,\r\n  -1, -1, 1,\r\n   1, -1, 1\r\n];\r\n\r\ntarget.vertexCount = vertices.length / 3;\r\nconst { gl, shaderProgram } = target\r\n\r\ntarget.buffer = fnGL.createBuffer(gl, new Float32Array(vertices))\r\nfnGL.createAttrib(\r\n    gl, shaderProgram, \"coords\", 3,\r\n    0, 0,\r\n    false\r\n );\r\n const normals = [\r\n   0, 0, 1,   0, 0, 1,   0, 0, 1,   0, 0, 1,\r\n   0, 1, 0,   0, 1, 0,   0, 1, 0,   0, 1, 0,\r\n   0, 0, -1,  0, 0, -1,  0, 0, -1,  0, 0, -1,\r\n   0, -1, 0,  0, -1, 0,  0, -1, 0,  0, -1, 0,\r\n  -1, 0, 0,  -1, 0, 0,  -1, 0, 0,  -1, 0, 0,\r\n   1, 0, 0,   1, 0, 0,   1, 0, 0,   1, 0, 0\r\n];\r\n\r\ntarget.normalBuffer = fnGL.createBuffer(gl, new Float32Array(normals))\r\nfnGL.createAttrib(\r\n    gl, shaderProgram, \"normal\", 3,\r\n    0, 0\r\n );\r\n\r\n const lightColor = gl.getUniformLocation(shaderProgram, \"lightColor\");\r\n gl.uniform3f(lightColor, 1, 1, 1);\r\n const lightDirection = gl.getUniformLocation(shaderProgram, \"lightDirection\")\r\n gl.uniform3f(lightDirection, 0.5, 1, 0);\r\n\r\n  },\r\n\r\n createIndices : (target) => {\r\n   const indices = target.indices = [\r\n    0, 1, 2,   1, 2, 3,\r\n    2, 3, 4,   3, 4, 5,\r\n    4, 5, 6,   5, 6, 7,\r\n    6, 7, 0,   7, 0, 1,\r\n    0, 2, 6,   2, 6, 4,\r\n    1, 3, 7,   3, 7, 5\r\n  ];\r\n  target.indexCount = indices.length;\r\n  const { gl } = target\r\n  target.indexBuffer = fnGL.createBuffer(\r\n    gl, new Uint8Array(indices), \"ELEMENT_ARRAY_BUFFER\"\r\n  )\r\n},\r\n\r\nclearBuffers : (target) => {\r\n  const { gl, buffer, indexBuffer } = target\r\n  gl.deleteBuffer(buffer);\r\n  gl.deleteBuffer(indexBuffer)\r\n}\r\n\r\n}\r\n\r\nexport default CubeWithLight\r\n"]}