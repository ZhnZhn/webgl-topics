{"version":3,"sources":["../../../../src/components/topics/gl-decorators/startAnimation.js"],"names":["_startAnimation","target","initGL","createShaders","createPerspective","setPointSize","configMatrix","draw","props","valuesForInit","_createVertices","createVertices","_createIndices","createIndices","_loadTexture","loadTexture","_draw","_valuesForInit","Object","assign","key","isWithoutPerspective","isWithoutPointSize","startAnimation","prototype"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEO,IAAMA,4CAAkB,SAAlBA,eAAkB,CAACC,MAAD,EAAY;AAAA,QAE/BC,MAF+B,GAM7BD,MAN6B,CAE/BC,MAF+B;AAAA,QAEvBC,aAFuB,GAM7BF,MAN6B,CAEvBE,aAFuB;AAAA,QAG/BC,iBAH+B,GAM7BH,MAN6B,CAG/BG,iBAH+B;AAAA,QAGZC,YAHY,GAM7BJ,MAN6B,CAGZI,YAHY;AAAA,QAGEC,YAHF,GAM7BL,MAN6B,CAGEK,YAHF;AAAA,QAI/BC,IAJ+B,GAM7BN,MAN6B,CAI/BM,IAJ+B;AAAA,QAK/BC,KAL+B,GAM7BP,MAN6B,CAK/BO,KAL+B;AAAA,QAQ/BC,aAR+B,GAa7BD,KAb6B,CAQ/BC,aAR+B;AAAA,QASdC,eATc,GAa7BF,KAb6B,CAS/BG,cAT+B;AAAA,QAUfC,cAVe,GAa7BJ,KAb6B,CAU/BK,aAV+B;AAAA,QAWjBC,YAXiB,GAa7BN,KAb6B,CAW/BO,WAX+B;AAAA,QAYxBC,KAZwB,GAa7BR,KAb6B,CAY/BD,IAZ+B;AAAA,QAcjCU,cAdiC,GAchBC,OAAOC,MAAP,CAAc,EAAd,sBAA4BV,aAA5B,CAdgB;;AAgBvC,SAAI,IAAMW,GAAV,IAAiBH,cAAjB,EAAgC;AAC9BhB,eAAOmB,GAAP,IAAcH,eAAeG,GAAf,CAAd;AACD;;AAEDlB,WAAOD,MAAP;AACAE,kBAAcF,MAAd;AACAS,oBAAgBT,MAAhB;;AAEA,QAAI,CAACA,OAAOoB,oBAAZ,EAAiC;AAC/BjB,0BAAkBH,MAAlB;AACD;;AAED,QAAI,CAACA,OAAOqB,kBAAZ,EAA+B;AAC7BjB,qBAAaJ,MAAb;AACD;AACDK,iBAAaL,MAAb;;AAEA,QAAI,oBAAWW,cAAX,CAAJ,EAAgC;AAC9BA,uBAAeX,MAAf;AACD;AACD,QAAG,oBAAWa,YAAX,CAAH,EAA6B;AAC3BA,qBAAab,MAAb;AACD;;AAED,QAAI,oBAAWe,KAAX,CAAJ,EAAsB;AAAEA,cAAMf,MAAN;AAAc,KAAtC,MACsB;AAAEM,aAAKN,MAAL;AAAc;AACzC,CA1CM;;AA4CP,IAAMsB,iBAAiB,SAAjBA,cAAiB,CAACtB,MAAD,EAAY;AACjCA,WAAOuB,SAAP,CAAiBD,cAAjB,GAAkCvB,eAAlC;AACD,CAFD;;kBAIeuB,c","file":"startAnimation.js","sourcesContent":["import dfValues from '../gl-props/dfValues';\r\nimport { isFunction } from '../../../utils/is'\r\n\r\nexport const _startAnimation = (target) => {\r\n    const {\r\n            initGL, createShaders,\r\n            createPerspective, setPointSize, configMatrix,\r\n            draw,\r\n            props\r\n          } = target\r\n        , {\r\n            valuesForInit,\r\n            createVertices : _createVertices,\r\n            createIndices : _createIndices,\r\n            loadTexture : _loadTexture,\r\n            draw : _draw\r\n          } = props\r\n        , _valuesForInit = Object.assign({}, dfValues, valuesForInit)\r\n\r\n    for(const key in _valuesForInit){\r\n      target[key] = _valuesForInit[key]\r\n    }\r\n\r\n    initGL(target);\r\n    createShaders(target);\r\n    _createVertices(target);\r\n\r\n    if (!target.isWithoutPerspective){\r\n      createPerspective(target);\r\n    }\r\n\r\n    if (!target.isWithoutPointSize){\r\n      setPointSize(target);\r\n    }\r\n    configMatrix(target);\r\n\r\n    if (isFunction(_createIndices)) {\r\n      _createIndices(target)\r\n    }\r\n    if(isFunction(_loadTexture)) {\r\n      _loadTexture(target)\r\n    }\r\n\r\n    if (isFunction(_draw)){ _draw(target)}\r\n    else                  { draw(target) }    \r\n}\r\n\r\nconst startAnimation = (target) => {\r\n  target.prototype.startAnimation = _startAnimation\r\n}\r\n\r\nexport default startAnimation\r\n"]}