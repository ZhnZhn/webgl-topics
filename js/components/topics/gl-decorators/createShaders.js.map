{"version":3,"sources":["../../../../src/components/topics/gl-decorators/createShaders.js"],"names":["_defaultVertex","_defaultFragment","TYPE","FRAGMENT","VERTEX","_compileShader","gl","shaderCode","shaderType","shader","createShader","FRAGMENT_SHADER","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","_createShaders","target","props","vertexShaderCode","fragmentShaderCode","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","linkProgram","useProgram","createShaders","prototype"],"mappings":";;;;;;AACA,IAAMA,0UAAN;AAaA,IAAMC,qIAAN;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,IAAMC,OAAO;AACXC,cAAW,UADA;AAEXC,YAAS;AAFE,CAAb;;AAKA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,EAAD,EAAKC,UAAL,EAAiBC,UAAjB,EAAgC;AACrD,QAAIC,eAAJ;AACA,QAAID,eAAeN,KAAKC,QAAxB,EAAkC;AAC9BM,iBAASH,GAAGI,YAAH,CAAgBJ,GAAGK,eAAnB,CAAT;AACH,KAFD,MAEO,IAAIH,eAAeN,KAAKE,MAAxB,EAAgC;AACnCK,iBAASH,GAAGI,YAAH,CAAgBJ,GAAGM,aAAnB,CAAT;AACH,KAFM,MAEA;AACH,eAAO,IAAP;AACH;;AAEDN,OAAGO,YAAH,CAAgBJ,MAAhB,EAAwBF,UAAxB;AACAD,OAAGQ,aAAH,CAAiBL,MAAjB;;AAEA,QAAI,CAACH,GAAGS,kBAAH,CAAsBN,MAAtB,EAA8BH,GAAGU,cAAjC,CAAL,EAAuD;AACnDC,cAAMX,GAAGY,gBAAH,CAAoBT,MAApB,CAAN;AACA,eAAO,IAAP;AACH;;AAED,WAAOA,MAAP;AACD,CAnBD;;AAsBO,IAAMU,0CAAiB,SAAjBA,cAAiB,CAACC,MAAD,EAAY;AAAA,QAChCd,EADgC,GACfc,MADe,CAChCd,EADgC;AAAA,wBACfc,MADe,CAC5BC,KAD4B;AAAA,QAC5BA,KAD4B,iCACtB,EADsB;AAAA,gCAKpCA,KALoC,CAGtCC,gBAHsC;AAAA,QAGtCA,gBAHsC,yCAGrBtB,cAHqB;AAAA,gCAKpCqB,KALoC,CAItCE,kBAJsC;AAAA,QAItCA,kBAJsC,yCAInBtB,gBAJmB;AAAA,QAMtCuB,YANsC,GAMvBnB,eAAeC,EAAf,EAAmBgB,gBAAnB,EAAqCpB,KAAKE,MAA1C,CANuB;AAAA,QAOtCqB,cAPsC,GAOrBpB,eAAeC,EAAf,EAAmBiB,kBAAnB,EAAuCrB,KAAKC,QAA5C,CAPqB;AAQxC;AACA;;;AAIAiB,WAAOM,aAAP,GAAuBpB,GAAGqB,aAAH,EAAvB;AACArB,OAAGsB,YAAH,CAAgBR,OAAOM,aAAvB,EAAsCF,YAAtC;AACAlB,OAAGsB,YAAH,CAAgBR,OAAOM,aAAvB,EAAsCD,cAAtC;AACAnB,OAAGuB,WAAH,CAAeT,OAAOM,aAAtB;AACApB,OAAGwB,UAAH,CAAcV,OAAOM,aAArB;AACD,CAlBM;;AAqBP,IAAMK,gBAAgB,SAAhBA,aAAgB,CAACX,MAAD,EAAY;AAC/BA,WAAOY,SAAP,CAAiBD,aAAjB,GAAiCZ,cAAjC;AACF,CAFD;;kBAIeY,a","file":"createShaders.js","sourcesContent":["\r\nconst _defaultVertex = `\r\nattribute float pointSize;\r\nattribute vec4 coords;\r\nattribute vec4 colors;\r\nuniform mat4 transformMatrix;\r\nuniform mat4 perspectiveMatrix;\r\nvarying vec4 varyingColors;\r\nvoid main(void){\r\n  gl_Position = perspectiveMatrix * transformMatrix * coords;\r\n  gl_PointSize = pointSize;\r\n  varyingColors = colors;\r\n}\r\n`\r\nconst _defaultFragment = `\r\nprecision mediump float;\r\nvarying vec4 varyingColors;\r\nvoid main(void) {\r\n  gl_FragColor = varyingColors;\r\n}\r\n`\r\n\r\n/*\r\nconst getShader = function(gl, id) {\r\n      var shaderScript = document.getElementById(id);\r\n      if (!shaderScript) {\r\n          return null;\r\n      }\r\n\r\n      var str = \"\";\r\n      var k = shaderScript.firstChild;\r\n      while (k) {\r\n          if (k.nodeType == 3)\r\n              str += k.textContent;\r\n          k = k.nextSibling;\r\n      }\r\n\r\n      var shader;\r\n      if (shaderScript.type == \"x-shader/x-fragment\") {\r\n          shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      } else if (shaderScript.type == \"x-shader/x-vertex\") {\r\n          shader = gl.createShader(gl.VERTEX_SHADER);\r\n      } else {\r\n          return null;\r\n      }\r\n\r\n      gl.shaderSource(shader, str);\r\n      gl.compileShader(shader);\r\n\r\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n          alert(gl.getShaderInfoLog(shader));\r\n          return null;\r\n      }\r\n\r\n      return shader;\r\n  }\r\n*/\r\n\r\nconst TYPE = {\r\n  FRAGMENT : \"FRAGMENT\",\r\n  VERTEX : \"VERTEX\"\r\n}\r\n\r\nconst _compileShader = (gl, shaderCode, shaderType) => {\r\n  let shader;\r\n  if (shaderType === TYPE.FRAGMENT) {\r\n      shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  } else if (shaderType === TYPE.VERTEX) {\r\n      shader = gl.createShader(gl.VERTEX_SHADER);\r\n  } else {\r\n      return null;\r\n  }\r\n\r\n  gl.shaderSource(shader, shaderCode);\r\n  gl.compileShader(shader);\r\n\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      alert(gl.getShaderInfoLog(shader));\r\n      return null;\r\n  }\r\n\r\n  return shader;\r\n}\r\n\r\n\r\nexport const _createShaders = (target) => {\r\n  const { gl, props={} } = target\r\n  , {\r\n    vertexShaderCode=_defaultVertex,\r\n    fragmentShaderCode=_defaultFragment\r\n  } = props\r\n  , vertexShader = _compileShader(gl, vertexShaderCode, TYPE.VERTEX)\r\n  , fragmentShader = _compileShader(gl, fragmentShaderCode, TYPE.FRAGMENT)\r\n  //,vertexShader = getShader(gl, \"shader-vs\")\r\n  //,fragmentShader = getShader(gl, \"shader-fs\");\r\n\r\n\r\n\r\n  target.shaderProgram = gl.createProgram();\r\n  gl.attachShader(target.shaderProgram, vertexShader);\r\n  gl.attachShader(target.shaderProgram, fragmentShader);\r\n  gl.linkProgram(target.shaderProgram);\r\n  gl.useProgram(target.shaderProgram);\r\n}\r\n\r\n\r\nconst createShaders = (target) => {\r\n   target.prototype.createShaders = _createShaders\r\n}\r\n\r\nexport default createShaders\r\n"]}