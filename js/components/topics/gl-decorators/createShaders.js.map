{"version":3,"sources":["../../../../src/components/topics/gl-decorators/createShaders.js"],"names":["_defaultVertex","_defaultFragment","TYPE","FRAGMENT","VERTEX","_compileShader","gl","shaderCode","shaderType","shader","createShader","FRAGMENT_SHADER","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","_createShaders","target","props","vertexShaderCode","fragmentShaderCode","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","linkProgram","useProgram","createShaders","prototype"],"mappings":";;;;AACA,IAAMA,cAAc,4TAApB;AAaA,IAAMC,gBAAgB,qHAAtB;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,IAAI,GAAG;AACXC,EAAAA,QAAQ,EAAG,UADA;AAEXC,EAAAA,MAAM,EAAG;AAFE,CAAb;;AAKA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,EAAD,EAAKC,UAAL,EAAiBC,UAAjB,EAAgC;AACrD,MAAIC,MAAJ;;AACA,MAAID,UAAU,KAAKN,IAAI,CAACC,QAAxB,EAAkC;AAC9BM,IAAAA,MAAM,GAAGH,EAAE,CAACI,YAAH,CAAgBJ,EAAE,CAACK,eAAnB,CAAT;AACH,GAFD,MAEO,IAAIH,UAAU,KAAKN,IAAI,CAACE,MAAxB,EAAgC;AACnCK,IAAAA,MAAM,GAAGH,EAAE,CAACI,YAAH,CAAgBJ,EAAE,CAACM,aAAnB,CAAT;AACH,GAFM,MAEA;AACH,WAAO,IAAP;AACH;;AAEDN,EAAAA,EAAE,CAACO,YAAH,CAAgBJ,MAAhB,EAAwBF,UAAxB;AACAD,EAAAA,EAAE,CAACQ,aAAH,CAAiBL,MAAjB;;AAEA,MAAI,CAACH,EAAE,CAACS,kBAAH,CAAsBN,MAAtB,EAA8BH,EAAE,CAACU,cAAjC,CAAL,EAAuD;AACnDC,IAAAA,KAAK,CAACX,EAAE,CAACY,gBAAH,CAAoBT,MAApB,CAAD,CAAL;AACA,WAAO,IAAP;AACH;;AAED,SAAOA,MAAP;AACD,CAnBD;;AAsBO,IAAMU,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAAY;AAAA,MAChCd,EADgC,GACfc,MADe,CAChCd,EADgC;AAAA,sBACfc,MADe,CAC5BC,KAD4B;AAAA,MAC5BA,KAD4B,8BACtB,EADsB;AAAA,8BAKpCA,KALoC,CAGtCC,gBAHsC;AAAA,MAGtCA,gBAHsC,sCAGrBtB,cAHqB;AAAA,8BAKpCqB,KALoC,CAItCE,kBAJsC;AAAA,MAItCA,kBAJsC,sCAInBtB,gBAJmB;AAAA,MAMtCuB,YANsC,GAMvBnB,cAAc,CAACC,EAAD,EAAKgB,gBAAL,EAAuBpB,IAAI,CAACE,MAA5B,CANS;AAAA,MAOtCqB,cAPsC,GAOrBpB,cAAc,CAACC,EAAD,EAAKiB,kBAAL,EAAyBrB,IAAI,CAACC,QAA9B,CAPO,EAQxC;AACA;;;AAIAiB,EAAAA,MAAM,CAACM,aAAP,GAAuBpB,EAAE,CAACqB,aAAH,EAAvB;AACArB,EAAAA,EAAE,CAACsB,YAAH,CAAgBR,MAAM,CAACM,aAAvB,EAAsCF,YAAtC;AACAlB,EAAAA,EAAE,CAACsB,YAAH,CAAgBR,MAAM,CAACM,aAAvB,EAAsCD,cAAtC;AACAnB,EAAAA,EAAE,CAACuB,WAAH,CAAeT,MAAM,CAACM,aAAtB;AACApB,EAAAA,EAAE,CAACwB,UAAH,CAAcV,MAAM,CAACM,aAArB;AACD,CAlBM;;;;AAqBP,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACX,MAAD,EAAY;AAC/BA,EAAAA,MAAM,CAACY,SAAP,CAAiBD,aAAjB,GAAiCZ,cAAjC;AACF,CAFD;;eAIeY,a","sourcesContent":["\r\nconst _defaultVertex = `\r\nattribute float pointSize;\r\nattribute vec4 coords;\r\nattribute vec4 colors;\r\nuniform mat4 transformMatrix;\r\nuniform mat4 perspectiveMatrix;\r\nvarying vec4 varyingColors;\r\nvoid main(void){\r\n  gl_Position = perspectiveMatrix * transformMatrix * coords;\r\n  gl_PointSize = pointSize;\r\n  varyingColors = colors;\r\n}\r\n`\r\nconst _defaultFragment = `\r\nprecision mediump float;\r\nvarying vec4 varyingColors;\r\nvoid main(void) {\r\n  gl_FragColor = varyingColors;\r\n}\r\n`\r\n\r\n/*\r\nconst getShader = function(gl, id) {\r\n      var shaderScript = document.getElementById(id);\r\n      if (!shaderScript) {\r\n          return null;\r\n      }\r\n\r\n      var str = \"\";\r\n      var k = shaderScript.firstChild;\r\n      while (k) {\r\n          if (k.nodeType == 3)\r\n              str += k.textContent;\r\n          k = k.nextSibling;\r\n      }\r\n\r\n      var shader;\r\n      if (shaderScript.type == \"x-shader/x-fragment\") {\r\n          shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      } else if (shaderScript.type == \"x-shader/x-vertex\") {\r\n          shader = gl.createShader(gl.VERTEX_SHADER);\r\n      } else {\r\n          return null;\r\n      }\r\n\r\n      gl.shaderSource(shader, str);\r\n      gl.compileShader(shader);\r\n\r\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n          alert(gl.getShaderInfoLog(shader));\r\n          return null;\r\n      }\r\n\r\n      return shader;\r\n  }\r\n*/\r\n\r\nconst TYPE = {\r\n  FRAGMENT : \"FRAGMENT\",\r\n  VERTEX : \"VERTEX\"\r\n}\r\n\r\nconst _compileShader = (gl, shaderCode, shaderType) => {\r\n  let shader;\r\n  if (shaderType === TYPE.FRAGMENT) {\r\n      shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  } else if (shaderType === TYPE.VERTEX) {\r\n      shader = gl.createShader(gl.VERTEX_SHADER);\r\n  } else {\r\n      return null;\r\n  }\r\n\r\n  gl.shaderSource(shader, shaderCode);\r\n  gl.compileShader(shader);\r\n\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      alert(gl.getShaderInfoLog(shader));\r\n      return null;\r\n  }\r\n\r\n  return shader;\r\n}\r\n\r\n\r\nexport const _createShaders = (target) => {\r\n  const { gl, props={} } = target\r\n  , {\r\n    vertexShaderCode=_defaultVertex,\r\n    fragmentShaderCode=_defaultFragment\r\n  } = props\r\n  , vertexShader = _compileShader(gl, vertexShaderCode, TYPE.VERTEX)\r\n  , fragmentShader = _compileShader(gl, fragmentShaderCode, TYPE.FRAGMENT)\r\n  //,vertexShader = getShader(gl, \"shader-vs\")\r\n  //,fragmentShader = getShader(gl, \"shader-fs\");\r\n\r\n\r\n\r\n  target.shaderProgram = gl.createProgram();\r\n  gl.attachShader(target.shaderProgram, vertexShader);\r\n  gl.attachShader(target.shaderProgram, fragmentShader);\r\n  gl.linkProgram(target.shaderProgram);\r\n  gl.useProgram(target.shaderProgram);\r\n}\r\n\r\n\r\nconst createShaders = (target) => {\r\n   target.prototype.createShaders = _createShaders\r\n}\r\n\r\nexport default createShaders\r\n"],"file":"createShaders.js"}